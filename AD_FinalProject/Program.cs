using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace AD_FinalProject
{
    class Program
    {
        static void Main(string[] args)
        {

            Console.WriteLine("[1]. Pattern Detection\n[2]. Scan Input files for malware detection");
            string command = Console.ReadLine();

            if (command == "1")
            {
                System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
                stopwatch.Start();

                Console.WriteLine("Reading Directories . . .");

                //////////////////////////////////Reading malware files pathes///////////////////////////////////////////

                List<string> Malware_paths = Directory.EnumerateDirectories("D:\\Elmos\\AD\\FinalProject\\Released\\Released\\Train\\Malware Sample").ToList(); //Reading directory paths
                List<string>[] Malware_dirs = new List<string>[Malware_paths.Count];

                for (int i = 0; i < Malware_dirs.Length; i++)
                    Malware_dirs[i] = new List<string>();

                for (int i = 0; i < Malware_paths.Count; i++)
                    Malware_dirs[i] = Directory.EnumerateFiles(Malware_paths[i]).ToList(); //Reading pile paths

                //////////////////////////////////Reading benign files paths/////////////////////////////////////////////

                List<string> Benign_path = Directory.EnumerateFiles("D:\\Elmos\\AD\\FinalProject\\Released\\Released\\Train\\Benign").ToList();

                //////////////////////////////////Reading files/////////////////////////////////////////

                List<byte[]>[] Malware_files = new List<byte[]>[Malware_dirs.Length];
                List<byte[]> Benign_files = new List<byte[]>();

                for (int i = 0; i < Malware_files.Length; i++)
                    Malware_files[i] = new List<byte[]>();

                for (int i = 0; i < Malware_dirs.Length; i++)
                {
                    foreach (var file in Malware_dirs[i])
                    {
                        Malware_files[i].Add(File.ReadAllBytes(file));
                    }
                }

                foreach (var file in Benign_path)
                    Benign_files.Add(File.ReadAllBytes(file));

                Console.Clear();
                Console.WriteLine("Reading Complete.\nIdentifying Patterns . . . ");

                //////////////////////////////////////////////////////////////////////////////

                List<byte[]> Patterns = new List<byte[]>();
                List<byte[]> PatternsFoundForThisGroup;

                int NumOfPatternsForThisGroup;
                int TotalPatterns = 0;
                int FileCounter = 0;

                foreach (var MalwareGroup in Malware_files)
                {
                    NumOfPatternsForThisGroup = 0;
                    PatternsFoundForThisGroup = Z_Algorithm.FindPattern(MalwareGroup, Benign_files, ref FileCounter);

                    Patterns.AddRange(PatternsFoundForThisGroup);

                    NumOfPatternsForThisGroup = PatternsFoundForThisGroup.Count;
                    TotalPatterns += NumOfPatternsForThisGroup;


                    Console.Clear();
                    Console.WriteLine("\nSaving Identified Patterns . . .");

                    string PathToStorePatterns = "D:\\Elmos\\AD\\FinalProject\\Patterns.txt";
                    WritePatterns(Patterns, PathToStorePatterns);

                    Console.WriteLine("Identified Patterns have been saved.");
                    Console.WriteLine($"{NumOfPatternsForThisGroup} new patterns found. (Total {TotalPatterns} patterns have been found for {FileCounter} files so far . . .)");
                }


                Console.Clear();
                Console.WriteLine($"Done!.\nTotal identified patterns: {TotalPatterns}");

                stopwatch.Stop();
                Console.WriteLine($"Elapsed time: {stopwatch.ElapsedMilliseconds}");

                Console.WriteLine("Continue to Malware Detection? [Y/N]");
            }

            if (command == "2" || command == "Y")
            {
                string PathToReadPatterns = "D:\\Elmos\\AD\\FinalProject\\Patterns.txt";
                StreamReader reader = new StreamReader(PathToReadPatterns);
                List<string[]> PatternsToCheck = new List<string[]>();

                using (reader)
                {
                    var lines = File.ReadLines(PathToReadPatterns);
                    foreach (var line in lines)
                    {
                        PatternsToCheck.Add(line.Split(' '));
                    }
                    Console.WriteLine($"{PatternsToCheck.Count} Patterns To Check in files.");
                }


                Console.Write("Enter the path for input directory: ");
                string InputDirectory = Console.ReadLine(); //Directory path
                List<string> InputPaths = Directory.EnumerateFiles(InputDirectory).ToList();

                List<byte[]> InputFiles = new List<byte[]>();
                foreach (string path in InputPaths)
                    InputFiles.Add(File.ReadAllBytes(path));

                string MoveTo = "D:\\Elmos\\AD\\FinalProject\\IdentifiedMalwares"; //Directory path
                Directory.CreateDirectory(MoveTo);

                for (int i = 0; i < InputFiles.Count; i++)
                {
                    if (!Z_Algorithm.CheckPatterns(InputFiles[i], PatternsToCheck))
                        continue;

                    File.Move(InputPaths[i], MoveTo + "\\" + Path.GetFileName(InputPaths[i]));
                }
            }
        }

        public static void WritePatterns(List<byte[]> Patterns, string path)
        {
            StreamWriter writer = new StreamWriter(path);
            using (writer)
            {
                foreach (var pattern in Patterns)
                    writer.WriteLine(BitConverter.ToString(pattern).Replace('-', ' '));
            }
        }
    }

    class Z_Algorithm
    {
        private static Random rand = new Random(Guid.NewGuid().GetHashCode());
        public static bool CheckPatterns(byte[] text, List<string[]> patterns)
        {
            string[] TextStr = BitConverter.ToString(text).Split('-');
            int PatternLen;
            string[] Check;
            int[] Z_Array;
            foreach (var pattern in patterns)
            {
                PatternLen = pattern.Length;
                Check = new string[PatternLen + text.Length + 1];

                pattern.CopyTo(Check, 0);
                Check[PatternLen] = "$";
                TextStr.CopyTo(Check, PatternLen + 1);

                Z_Array = BuildZArray(Check, PatternLen);

                foreach (int num in Z_Array)
                    if (num == PatternLen)
                    {
                        Console.WriteLine("Malware Found!");
                        return true;
                    }
            }
            return false;
        }

        public static bool IsPatternValid(byte[] pattern, List<byte[]> BenignFiles)
        {

            foreach (var file in BenignFiles)
            {
                if (PatternMatches(file, pattern))
                    return false;
            }
            return true;
        }
        public static bool PatternMatches(byte[] text, byte[] pattern)
        {
            string[] PatternStr = BitConverter.ToString(pattern).Split('-');
            string[] TextStr = BitConverter.ToString(text).Split('-');
            int PatternLen = PatternStr.Length;
            string[] Check = new string[PatternLen + text.Length + 1];

            PatternStr.CopyTo(Check, 0);
            Check[PatternLen] = "$";
            TextStr.CopyTo(Check, PatternLen + 1);

            int[] Z_Array = BuildZArray(Check, PatternLen);

            foreach (int num in Z_Array)
                if (num == PatternLen)
                    return true;

            return false;
        }

        public static int[] BuildZArray(string[] text, int PatternLength)
        {
            int TextLen = text.Length;

            int[] Z_Array = new int[TextLen];
            Z_Array[0] = 0;

            int idx;
            int left = 0, right = 0;
            for (int i = 1; i < TextLen; i++)
            {
                if (i > right)
                {
                    left = right = i;

                    while (right < TextLen && text[right - left] == text[right])
                        right++;

                    Z_Array[i] = right - left;
                    right--;

                    continue;
                }

                idx = i - left;

                if (Z_Array[idx] < right - i + 1)
                {
                    Z_Array[i] = Z_Array[idx];
                    continue;
                }

                left = i;
                while (right < TextLen && text[right - left] == text[right])
                    right++;

                Z_Array[i] = right - left;
                right--;

            }

            return Z_Array;
        }


        public static List<byte[]> FindPattern(List<byte[]> MalwareFiles, List<byte[]> BenignFiles, ref int FileCounter)
        {
            List<byte[]> FoundPatterns = new List<byte[]>();
            int CheckedFilesInThisGroup = 0;
            int MWLen = MalwareFiles.Count;

            int PatternLength, index;
            bool[] PatternFound = new bool[MWLen];
            byte[] pattern;
            int MatchCount = 0;
            int FileLen;
            int PatternLengthOffset;

            for (int i = 0; i < MWLen; i++)
            {
                if (PatternFound[i])
                    continue;

                CheckedFilesInThisGroup++;

                FileLen = MalwareFiles[i].Length;
                if (FileLen < 200)
                    PatternLengthOffset = FileLen;
                else
                    PatternLengthOffset = 200;

                Console.WriteLine($"\nChecking file {i} . . .\n");

                for (int attempt = 0; attempt < 3; attempt++)
                {
                    MatchCount = 0;
                    PatternLength = rand.Next(PatternLengthOffset);
                    index = rand.Next(MalwareFiles[i].Length - PatternLength);
                    pattern = new byte[PatternLength];
                    Array.Copy(MalwareFiles[i], index, pattern, 0, PatternLength);

                    Console.WriteLine($"Pattern Length: {PatternLength}");

                    if (!IsPatternValid(pattern, BenignFiles))
                    {
                        attempt--;
                        continue;
                    }

                    PatternFound[i] = true;

                    for (int j = 0; j < MWLen; j++)
                    {
                        if (PatternFound[j])
                            continue;

                        Console.Write($"Checking file {j} for any matches . . . ");
                        if (PatternMatches(MalwareFiles[j], pattern))
                        {
                            Console.Write("(True)\n");
                            PatternFound[j] = true;
                            CheckedFilesInThisGroup++;
                            MatchCount++;
                        }
                        else
                            Console.Write("(False)\n");
                    }

                    if (attempt == 0 || MatchCount > 0)
                    {
                        FoundPatterns.Add(pattern);
                        Console.WriteLine($"\nNew pattern found. (Total {FoundPatterns.Count} for {CheckedFilesInThisGroup} files so far . . .)");
                        Console.WriteLine(BitConverter.ToString(pattern));
                    }
                }


                if (CheckedFilesInThisGroup == MWLen)
                    break;
            }

            FileCounter += CheckedFilesInThisGroup;
            return FoundPatterns;
        }
    }
}
